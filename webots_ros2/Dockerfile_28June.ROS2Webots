# --------------------------- #
## Webots 
# --------------------------- #
ARG BASE_IMAGE=nvidia/cudagl:11.4.2-devel-ubuntu20.04
FROM ${BASE_IMAGE}

LABEL maintainer="alexnic31@gmail.com"

# Disable dpkg/gdebi interactive dialogs
ENV DEBIAN_FRONTEND=noninteractive

# Determine Webots version to be used and set default argument
ARG WEBOTS_VERSION=R2022a
ARG WEBOTS_PACKAGE_PREFIX=

# Fix NVIDIA CUDA Linux repository key rotation
RUN apt-key del 7fa2af80
ENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu$(cat /etc/os-release | grep VERSION_ID | awk '{print substr($0,13,5)}' | awk -F'.' '{print $1$2}')/x86_64/3bf863cc.pub

# Install Webots runtime dependencies
RUN apt update && apt install --yes wget && rm -rf /var/lib/apt/lists/
RUN wget https://raw.githubusercontent.com/cyberbotics/webots/master/scripts/install/linux_runtime_dependencies.sh
RUN chmod +x linux_runtime_dependencies.sh && ./linux_runtime_dependencies.sh && rm ./linux_runtime_dependencies.sh && rm -rf /var/lib/apt/lists/

# Install X virtual framebuffer to be able to use Webots without GPU and GUI (e.g. CI)
RUN apt update && apt install --yes xvfb && rm -rf /var/lib/apt/lists/

# Install Webots
WORKDIR /usr/local
RUN wget https://github.com/cyberbotics/webots/releases/download/$WEBOTS_VERSION/webots-$WEBOTS_VERSION-x86-64$WEBOTS_PACKAGE_PREFIX.tar.bz2
RUN tar xjf webots-*.tar.bz2 && rm webots-*.tar.bz2
ENV QTWEBENGINE_DISABLE_SANDBOX=1
ENV WEBOTS_HOME /usr/local/webots
ENV PATH /usr/local/webots:${PATH}

# Finally open a bash command to let the user interact
CMD ["/bin/bash"]

# --------------------------- #
## Cocobots
# --------------------------- #

# ENV USER=cocobots
ENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES},display

# install packages
RUN apt-get update && apt-get -q -y install --no-install-recommends \
    bash-completion \
    dirmngr \
    lsb-release \
    python3-pip \
    sudo \
    tmux \
    wget \
    unzip \
    git \
    apt-utils \
    curl \
    software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# Already installed:
# timezone

# Create a user with passwordless sudo
# USER r sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Change HOME environment variable
ENV USER root
ENV HOME /home/${USER} 

# https://cyberbotics.com/doc/guide/running-extern-robot-controllers#running-extern-robot-controllers
ENV PYTHONPATH=${PYTHONPATH}:${WEBOTS_HOME}/lib/controller/python38
ENV LD_LIBRARY_PATH=/usr/local/webots/lib/controller:${LD_LIBRARY_PATH}

# Audio support
RUN usermod -aG audio $USER
RUN apt-get update && apt-get install -y alsa-utils

# --------------------------- #
## ROS 2 Foxy
# --------------------------- #

# setup keys
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

# setup sources.list
RUN echo "deb http://packages.ros.org/ros2/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros2-latest.list

# setup environment
ENV ROS_DISTRO foxy

# install ros2 packages
RUN apt-get update && apt-get install -y \
    ros-foxy-desktop \
    ros-foxy-webots-ros2 \
    ros-foxy-webots-ros2-driver \
    ~nros-foxy-rqt*

# install bootstrap tools
RUN apt-get update && apt-get install --no-install-recommends -y \
    build-essential \
    git \
    python3-colcon-common-extensions \
    python3-colcon-mixin \
    python3-rosdep \
    python3-vcstool \
    && rm -rf /var/lib/apt/lists/*

# install python packages
RUN pip3 install -U \
    argcomplete \
    numpy \
    pyyaml \
    flake8 \
    flake8-blind-except \
    flake8-builtins \
    flake8-class-newline \
    flake8-comprehensions \
    flake8-deprecated \
    flake8-docstrings \
    flake8-import-order \
    flake8-quotes \
    pytest-repeat \
    pytest-rerunfailures
# This is a workaround for pytest not found causing builds to fail
# Following RUN statements tests for regression of https://github.com/ros2/ros2/issues/722
RUN pip3 freeze | grep pytest \
    && python3 -m pytest --version

ENV ROS_DISTRO=foxy
ENV AMENT_PREFIX_PATH=/opt/ros/foxy
ENV COLCON_PREFIX_PATH=/opt/ros/foxy
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/ros/foxy/lib
ENV PATH=/opt/ros/foxy/bin:$PATH
ENV PYTHONPATH=${PYTHONPATH}:/opt/ros/foxy/lib/python3.8/site-packages
ENV ROS_PYTHON_VERSION=3
ENV ROS_VERSION=2

################
# Expose the nvidia driver to allow opengl 
# Dependencies for glvnd and X11.
################
RUN apt-get update \
 && apt-get install -y -qq --no-install-recommends \
  libglvnd0 \
  libgl1 \
  libglx0 \
  libegl1 \
  libxext6 \
  libx11-6

# install rocker
# RUN apt-get update && apt-get install -y \
#     python3-rocker

# Env vars for the nvidia-container-runtime.
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute
ENV QT_X11_NO_MITSHM 1

# resolve a missing dependency for webots demo
RUN apt-get update && apt-get install -y \
		libxtst6 \
		&& apt-get clean \
		&& rm -rf /var/lib/apt/lists/*

# rosdep
RUN apt-get update
RUN rosdep init; rosdep update

# --------------------------- #
## UR Driver
# --------------------------- #

# Install ros2 control, moveit and other dependencies
RUN apt-get update && apt-get install -y \
		ros-foxy-ros2-control \
        ros-foxy-ros2-controllers \
        ros-foxy-moveit \
        ros-foxy-warehouse-ros-mongo \
        ros-foxy-srdfdom \
		&& apt-get clean \
		&& rm -rf /var/lib/apt/lists/*


ENV UR_ROS_WS=~/ros_ur_driver
RUN mkdir -p ${UR_ROS_WS}/src
RUN chown -R $USER:$USER ${UR_ROS_WS}
WORKDIR $UR_ROS_WS
RUN git clone -b foxy https://github.com/UniversalRobots/Universal_Robots_ROS2_Driver.git src/Universal_Robots_ROS2_Driver
RUN apt-get update
RUN rosdep install --ignore-src --from-paths src -y -r
RUN colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release
RUN /bin/bash -c "source install/setup.bash"

# --------------------------- #
## DepthAI (Luxonis OAK D Lite)
# --------------------------- #

# Dependencies
RUN apt-get update && apt-get -y upgrade
RUN apt-get install -y \
        libopencv-dev \
        udev \
		&& apt-get clean \
		&& rm -rf /var/lib/apt/lists/*

ENV DAI_WS=~/dai_ws
RUN mkdir -p ${DAI_WS}/src
RUN chown -R $USER:$USER ${DAI_WS}
WORKDIR $DAI_WS
# RUN git clone https://github.com/luxonis/depthai.git
# WORKDIR $DAI_WS/depthai
# COPY requirements.txt .
# RUN pip install -r requirements.txt
RUN echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="03e7", MODE="0666"' | tee /etc/udev/rules.d/80-movidius.rules
RUN wget -qO- https://raw.githubusercontent.com/luxonis/depthai-ros/main/install_dependencies.sh | sudo bash
RUN wget https://raw.githubusercontent.com/luxonis/depthai-ros/main/underlay.repos
RUN vcs import src < underlay.repos
RUN apt-get update
RUN rosdep install --from-paths src --ignore-src -r -y
RUN /bin/bash -c "source /opt/ros/foxy/setup.bash"
RUN colcon build 
RUN /bin/bash -c "source install/setup.bash"

# --------------------------- #
## Cocobots workspace
# --------------------------- #

# Permissions to workspace
ENV CCBTS_WS=~/cocobots_ws
RUN mkdir -p ${CCBTS_WS}/src
RUN chown -R $USER:$USER ${CCBTS_WS}
RUN chown -R $USER:$USER ${CCBTS_WS}/src

# Webots config
RUN mkdir -p /home/$USER/.config/Cyberbotics
COPY --chown=$USER:$USER Webots-R2022a.conf /home/$USER/.config/Cyberbotics/Webots-R2022a.conf

# Tmux config
# COPY --chown=$USER:$USER .tmux.conf /home/$USER/.tmux.conf


# USER $USER

############# <<< For ssh #############################

# Create ssh key for git private repos
#Accept input argument from docker-compose.yml
# ARG SSH_PRIVATE_KEY
# WORKDIR /root/temp
# RUN apt-get update
# RUN mkdir /root/.ssh/
# RUN echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_ed25519.pub
# RUN chmod 600 /root/.ssh/id_ed25519.pub
# RUN touch /root/.ssh/known_hosts
# RUN ssh-keyscan github.com >> /root/.ssh/known_hosts

# USER root
# Install ssh client and git
# RUN apt-get install -y \
#         openssh-client \
# 		&& apt-get clean \
# 		&& rm -rf /var/lib/apt/lists/*

# # # Download public key for github.com
# # RUN mkdir -p -m 0700 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts



# RUN mkdir -p /root/.ssh &&  chmod 700 /root/.ssh
# COPY /home/alex/.ssh/id_ed25519 /root/.ssh/id_ed25519
# RUN chmod 600 /root/.ssh/id_ed25519

# RUN ssh-keyscan -t ed25519 -H gitlab.com >> /root/.ssh/known_hosts


# RUN mkdir -p /root/.ssh && chmod 700 /root/.ssh
# COPY ~/.ssh/id_ed25519 /root/.ssh/id_ed25519
# RUN chmod 600 /root/.ssh/id_ed25519 && \
#     apt-get -yqq install openssh-client && \
#     ssh-keyscan -t ed25519 -H github.com >> /root/.ssh/known_hosts


# # Use GitHub CLI (gh)
# RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
# RUN apt-add-repository https://cli.github.com/packages
# RUN apt update
# RUN apt install -qq gh
# RUN ssh-keygen -t ed25519 -C ""

############# For ssh >>>> #############################

# Install the environment
# RUN ssh-add -l
# WORKDIR ${CCBTS_WS}
# RUN --mount=type=ssh git clone git@github.com:ccbts/085_ccbts_env.git src
# RUN rm -r /root/.ssh
# RUN colcon build
# RUN /bin/bash -c "source install/setup.bash"
# RUN PYTHONPATH=${PYTHONPATH}:/home/${USER}/cocobots_ws/install/ccbts_environment/lib/python3.8/site-packages

# Initialize the workspace:
WORKDIR ${HOME}/cocobots_ws
RUN /bin/bash -c "colcon build --symlink-install"

# Source ros2 environment (update bashrc)
RUN echo "source /opt/ros/foxy/setup.bash" >> /home/$USER/.bashrc
RUN echo "source /home/root/cocobots_ws/install/setup.bash" >> /home/$USER/.bashrc
# RUN echo "source /home/root/dai_ws/install/setup.bash" >> /home/$USER/.bashrc
# RUN echo "source /home/root/ros_ur_driver/install/setup.bash" >> /home/$USER/.bashrc


COPY ./entrypoint.sh /home/${USER}/cocobots_ws/docker/entrypoint.sh
RUN sudo chmod +x /home/${USER}/cocobots_ws/docker/entrypoint.sh
ENTRYPOINT ["/home/root/cocobots_ws/docker/entrypoint.sh"]
CMD ["bash"]